#version 460

#extension GL_GOOGLE_include_directive: require
#include "common.glsl"

layout(local_size_x = 32, local_size_y = 1, local_size_z = 1) in;

layout(constant_id = 0) const uint SEGMENT_COUNT = 1;
layout(constant_id = 1) const uint SAMPLES_PER_SEGMENT = 1;
layout(constant_id = 2) const uint VERTICES_PER_SAMPLE = 1;
layout(constant_id = 3) const uint FIREFLIES_PER_SEGMENT = 1;
layout(constant_id = 4) const uint FIREFLIES_COUNT = 1;
layout(constant_id = 5) const uint INDICES_PER_SEGMENT = 1;

layout(binding = 0) buffer InVertexBuffer {
    AlignedFireflyVertex in_vertices[];
};

layout(binding = 1) buffer OutVertexBuffer {
    AlignedFireflyVertex out_vertices[];
};

layout(binding = 3) buffer TunnelBezierPointsBuffer {
    vec3 tunnel_bezier_points[];
};

layout(binding = 4) buffer TunnelIndexBuffer {
    uint tunnel_indices[];
};

layout(binding = 5) buffer TunnelVertexBuffer {
    AlignedTunnelVertex tunnel_vertices[];
};

layout(push_constant) uniform PushConstant {
    FireflyMovePushConstants pc;
};

uint rng_state;

uint PCGHashState()
{
    rng_state = rng_state * 747796405u + 2891336453u;
    uint state = rng_state;
    uint word = ((state >> ((state >> 28u) + 4u)) ^ state) * 277803737u;
    return (word >> 22u) ^ word;
}

uint PCGHash(uint seed)
{
    uint state = seed * 747796405u + 2891336453u;
    uint word = ((state >> ((state >> 28u) + 4u)) ^ state) * 277803737u;
    return (word >> 22u) ^ word;
}

float pcg_random_state()
{
    return ((float(PCGHashState()) / float(0xFFFFFFFFU)) - 0.5) * 2.0;
}

float pcg_random(uint seed)
{
    return ((float(PCGHash(seed)) / float(0xFFFFFFFFU)) - 0.5) * 2.0;
}

float pcg_random_state_clipped()
{
    return cos(PI * PCGHashState()) * (((float(PCGHashState()) / float(0xFFFFFFFFU)) * 0.5) + 0.5);
}

float pcg_random_clipped(uint seed)
{
    return cos(PI * PCGHashState()) * (((float(PCGHash(seed)) / float(0xFFFFFFFFU)) * 0.5) + 0.5);
}

bool intersect_triangle(in vec3 p, in vec3 dir, in float max_t, in vec3 a, in vec3 b, in vec3 c, out float t, out vec2 bary)
{
    vec3 i = b - a;
    vec3 j = c - a;
    vec3 k = p - a;
    vec3 r = dir;
  
    // (t, u, v) = (1 / (r x j) * i) ((k x i) * j, (r x j) * k, (k x i) * r)
    vec3 rxj = cross(r, j);
    float rxji = dot(rxj, i);
    if (abs(rxji) < 1e-16) return false;
    float f = 1.0f / rxji;
    
    bary.x = dot(rxj, k) * f;
    if (bary.x < 0.0f || bary.x > 1.0f) return false;
    vec3 kxi = cross(k, i);
    bary.y =  dot(kxi, r) * f;
    if (bary.y < 0.0 || bary.y > 1.0) return false;
    if (bary.x + bary.y > 1.0) return false;
    
    t = dot(kxi, j) * f;
    return (t > 0.0 && t < max_t);
}

bool intersect_tunnel(in vec3 old_pos, in vec3 new_pos, in uint segment_idx, out vec3 normal)
{
    float t = 0.0;
    vec2 bary = vec2(0.0, 0.0);
    for (uint i = segment_idx * INDICES_PER_SEGMENT; i < INDICES_PER_SEGMENT * (segment_idx + 1); i += 3)
    {
        TunnelVertex p0 = unpack_tunnel_vertex(tunnel_vertices[tunnel_indices[pc.first_segment_indices_idx + i]]);
        TunnelVertex p1 = unpack_tunnel_vertex(tunnel_vertices[tunnel_indices[pc.first_segment_indices_idx + 1 + i]]);
        TunnelVertex p2 = unpack_tunnel_vertex(tunnel_vertices[tunnel_indices[pc.first_segment_indices_idx + 2 + i]]);
        if (distance(new_pos, old_pos) < 0.0001) continue;
        if (intersect_triangle(old_pos, normalize(new_pos - old_pos), distance(new_pos, old_pos), p0.pos, p1.pos, p2.pos, t, bary))
        {
            normal = p0.normal;
            return true;
        }
    }
    return false;
}

void main()
{
    if (gl_GlobalInvocationID.x >= FIREFLIES_COUNT) return;
    // different state every 2 seconds and for every firefly
    rng_state = uint(pc.time / 2000.0 + gl_GlobalInvocationID.x);
    // seed is used to have different random number in every frame
    uint seed = uint(gl_GlobalInvocationID.x + FIREFLIES_COUNT * pc.time * pc.time_diff);

    // calculate uid of segment firefly is located in
    uint segment_uid = (pc.segment_uid - SEGMENT_COUNT + 1) + gl_GlobalInvocationID.x / FIREFLIES_PER_SEGMENT;
    // also, calculate the index of the segment in the currently rendered tunnel segments
    uint segment_idx = gl_GlobalInvocationID.x / FIREFLIES_PER_SEGMENT;
    uint firefly_idx = (segment_uid * FIREFLIES_PER_SEGMENT) % FIREFLIES_COUNT + gl_GlobalInvocationID.x % FIREFLIES_PER_SEGMENT;
    // bezier points of segment
    vec3 p0 = tunnel_bezier_points[(segment_uid * 2) % (SEGMENT_COUNT * 2 + 3)];
    vec3 p1 = tunnel_bezier_points[(segment_uid * 2 + 1) % (SEGMENT_COUNT * 2 + 3)];
    vec3 p2 = tunnel_bezier_points[(segment_uid * 2 + 2) % (SEGMENT_COUNT * 2 + 3)];

    FireflyVertex v = unpack_firefly_vertex(in_vertices[firefly_idx]);
    vec3 old_pos = v.pos;

    // set random acceleration every 2 seconds
    vec3 acc = vec3(pcg_random_state_clipped() * pcg_random_state(), pcg_random_state_clipped() * pcg_random_state(), pcg_random_state_clipped() * pcg_random_state());
    v.vel += acc * pc.time_diff;
    // reduce applied velocity by random value to simulate insect like behavior
    v.pos += pcg_random_clipped(seed) * v.vel * pc.time_diff;
    v.col = vec3(pcg_random_state() + 1.0, pcg_random_state() + 1.0, pcg_random_state() + 1.0);
    // check if firefly moved out of its segment in either direction
    if (dot(normalize(v.pos - p0), normalize(p1 - p0)) < 0.0)
    {
        v.pos -= pcg_random_clipped(seed) * v.vel * pc.time_diff;
        v.vel = reflect(v.vel, normalize(p1 - p0));
        v.pos += pcg_random_clipped(seed) * v.vel * pc.time_diff;
    }
    else if (dot(normalize(v.pos - p2), normalize(p2 - p1)) > 0.0)
    {
        v.pos -= pcg_random_clipped(seed) * v.vel * pc.time_diff;
        v.vel = reflect(v.vel, normalize(p2 - p1));
        v.pos += pcg_random_clipped(seed) * v.vel * pc.time_diff;
    }
    vec3 normal;
    if (intersect_tunnel(old_pos, v.pos, segment_idx, normal))
    {
        v.pos -= pcg_random_clipped(seed) * v.vel * pc.time_diff;
        v.vel = reflect(v.vel, normal);
        v.pos += pcg_random_clipped(seed) * v.vel * pc.time_diff;
    }
    out_vertices[firefly_idx] = pack_firefly_vertex(v);
}
